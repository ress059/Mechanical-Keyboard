
Keyboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000198  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000100  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000020  00000000  00000000  000001c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000cde  00000000  00000000  000001e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000009cd  00000000  00000000  00000ec5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000024d  00000000  00000000  00001892  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  00001ae0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000371  00000000  00000000  00001b04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  00001e75  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .text         00000004  00000140  00000140  00000194  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e88  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .text.main    00000040  00000100  00000100  00000154  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
   8:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
   c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  10:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  14:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  18:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  1c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  20:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  24:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  28:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  2c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  30:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  34:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  38:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  3c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  40:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  44:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  48:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  4c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  50:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  54:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  58:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  5c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  60:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  64:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  68:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  6c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  70:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  74:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  78:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  7c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  80:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  84:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  88:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  8c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  90:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  94:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  98:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  9c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  a0:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  a4:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  a8:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	ec ea       	ldi	r30, 0xAC	; 172
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	40 e0       	ldi	r20, 0x00	; 0
  be:	17 c0       	rjmp	.+46     	; 0xee <__do_clear_bss+0x8>
  c0:	b5 91       	lpm	r27, Z+
  c2:	a5 91       	lpm	r26, Z+
  c4:	35 91       	lpm	r19, Z+
  c6:	25 91       	lpm	r18, Z+
  c8:	05 91       	lpm	r16, Z+
  ca:	07 fd       	sbrc	r16, 7
  cc:	0c c0       	rjmp	.+24     	; 0xe6 <__do_clear_bss>
  ce:	95 91       	lpm	r25, Z+
  d0:	85 91       	lpm	r24, Z+
  d2:	ef 01       	movw	r28, r30
  d4:	f9 2f       	mov	r31, r25
  d6:	e8 2f       	mov	r30, r24
  d8:	05 90       	lpm	r0, Z+
  da:	0d 92       	st	X+, r0
  dc:	a2 17       	cp	r26, r18
  de:	b3 07       	cpc	r27, r19
  e0:	d9 f7       	brne	.-10     	; 0xd8 <__do_copy_data+0x20>
  e2:	fe 01       	movw	r30, r28
  e4:	04 c0       	rjmp	.+8      	; 0xee <__do_clear_bss+0x8>

000000e6 <__do_clear_bss>:
  e6:	1d 92       	st	X+, r1
  e8:	a2 17       	cp	r26, r18
  ea:	b3 07       	cpc	r27, r19
  ec:	e1 f7       	brne	.-8      	; 0xe6 <__do_clear_bss>
  ee:	ec 3a       	cpi	r30, 0xAC	; 172
  f0:	f4 07       	cpc	r31, r20
  f2:	31 f7       	brne	.-52     	; 0xc0 <__do_copy_data+0x8>
  f4:	0e 94 80 00 	call	0x100	; 0x100 <_etext>
  f8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <_exit>

000000fc <_exit>:
  fc:	f8 94       	cli

000000fe <__stop_program>:
  fe:	ff cf       	rjmp	.-2      	; 0xfe <__stop_program>

Disassembly of section .text:

00000140 <__bad_interrupt>:
 140:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

00000100 <main>:
const uint16_t Tim2_Start_Val = 0;
int a;

int main(void)
{
	DDRD |= (1<<DDD7);
 100:	8a b1       	in	r24, 0x0a	; 10
 102:	80 68       	ori	r24, 0x80	; 128
 104:	8a b9       	out	0x0a, r24	; 10
	
	PRR0 &= ~(1<<PRTIM1); //enable TIM1
 106:	e4 e6       	ldi	r30, 0x64	; 100
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	87 7f       	andi	r24, 0xF7	; 247
 10e:	80 83       	st	Z, r24
	TCCR1A = 0;
 110:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = ((1<<WGM12) | (1<<CS12)); //256 prescalar, Clear timer on TOP where TOP = OCR1A. see pg. 133
 114:	8c e0       	ldi	r24, 0x0C	; 12
 116:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	OCR1A = Tim2_Output_Compare_Val;
 11a:	89 e0       	ldi	r24, 0x09	; 9
 11c:	9d e3       	ldi	r25, 0x3D	; 61
 11e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 122:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCNT1 = Tim2_Start_Val;
 126:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 12a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	
    while(1)
    {
		if(TIFR1 & (1<<OCF1A)){
 12e:	b1 9b       	sbis	0x16, 1	; 22
 130:	fe cf       	rjmp	.-4      	; 0x12e <main+0x2e>
			PORTD ^= (1<<PORTD7);
 132:	8b b1       	in	r24, 0x0b	; 11
 134:	80 58       	subi	r24, 0x80	; 128
 136:	8b b9       	out	0x0b, r24	; 11
			TIFR1 |= (1<<OCF1A); //clear flag
 138:	86 b3       	in	r24, 0x16	; 22
 13a:	82 60       	ori	r24, 0x02	; 2
 13c:	86 bb       	out	0x16, r24	; 22
 13e:	f7 cf       	rjmp	.-18     	; 0x12e <main+0x2e>
